
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '56847B75B971E1F56CF492F331891EE6'
    
_lr_action_items = {'*':([30,45,47,56,91,],[-52,-31,71,-51,-30,]),'-':([30,43,45,47,56,91,92,93,],[-52,67,-31,-26,-51,-30,-24,-25,]),'NUMBER':([29,],[56,]),'ASSERT':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[3,-11,-8,3,-15,-12,-9,-10,-13,-6,-7,-52,3,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'BLIT':([26,41,46,53,68,74,75,],[44,44,44,44,44,44,44,]),'MEM_MASK':([34,],[59,]),'#':([7,13,26,41,46,53,63,66,67,68,71,72,74,75,76,87,],[29,34,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ASSUME':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[25,-11,-8,25,-15,-12,-9,-10,-13,-6,-7,-52,25,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'(':([3,25,26,41,46,53,66,67,68,71,72,74,75,76,87,],[26,41,46,46,68,46,87,87,68,87,87,46,46,87,87,]),'+':([30,43,45,47,56,91,92,93,],[-52,66,-31,-26,-51,-30,-24,-25,]),'REGISTER':([4,7,21,23,26,41,46,53,57,62,63,66,67,68,71,72,74,75,76,87,98,99,100,101,],[27,30,-35,39,30,30,30,30,80,-34,30,30,30,30,30,30,30,30,30,30,103,104,-33,105,]),'INSTR_MOVE':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[7,-11,-8,7,-15,-12,-9,-10,-13,-6,-7,-52,7,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),',':([6,21,27,30,31,39,55,56,62,81,82,85,],[28,38,54,-52,57,63,79,-51,83,98,99,101,]),'/':([30,45,47,56,91,],[-52,-31,72,-51,-30,]),'INSTR_ST':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[9,-11,-8,9,-15,-12,-9,-10,-13,-6,-7,-52,9,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'INSTR_NOP':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[11,-11,-8,11,-15,-12,-9,-10,-13,-6,-7,-52,11,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),':':([16,],[36,]),'$end':([1,2,5,8,10,11,12,14,17,18,20,22,30,33,36,37,56,59,61,73,78,80,84,86,103,104,105,],[-1,-11,-8,0,-2,-15,-12,-9,-10,-13,-6,-7,-52,-3,-4,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'RELOP':([30,43,45,47,52,56,70,88,89,91,92,93,],[-52,-20,-31,-26,76,-51,76,-18,-19,-30,-24,-25,]),'MEM_SYNC':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[13,-11,-8,13,-15,-12,-9,-10,-13,-6,-7,-52,13,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'INSTR_LD':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[15,-11,-8,15,-15,-12,-9,-10,-13,-6,-7,-52,15,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'[':([9,15,24,],[32,35,40,]),']':([58,60,64,],[81,82,85,]),'ID':([0,2,5,6,10,11,12,14,17,18,19,20,22,28,30,32,35,36,37,38,40,54,55,56,59,61,73,78,79,80,83,84,86,97,103,104,105,],[16,-11,-8,-41,16,-15,-12,-9,-10,-13,37,-6,-7,55,-52,58,60,-4,-32,62,64,78,-40,-51,-17,-5,-14,-29,97,-22,100,-21,-16,-39,-23,-27,-28,]),'AND':([30,43,44,45,47,48,50,51,56,77,88,89,90,91,92,93,96,],[-52,-20,-48,-31,-26,-45,75,-44,-51,-43,-18,-19,-49,-30,-24,-25,-53,]),'INSTR_BRANCH':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[21,-11,-8,21,-15,-12,-9,-10,-13,-6,-7,-52,21,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),')':([30,42,43,44,45,47,48,49,50,51,56,65,69,70,77,88,89,90,91,92,93,94,95,96,102,],[-52,-36,-20,-48,-31,-26,-45,73,-38,-44,-51,86,90,91,-43,-18,-19,-49,-30,-24,-25,-37,-42,-53,91,]),'INSTR_ARTH':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[23,-11,-8,23,-15,-12,-9,-10,-13,-6,-7,-52,23,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'NOT':([26,41,46,68,74,75,],[53,53,53,53,53,53,]),'INSTR_ATM':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[24,-11,-8,24,-15,-12,-9,-10,-13,-6,-7,-52,24,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'INSTR_BRANCH_A':([0,2,5,10,11,12,14,17,18,20,22,30,36,37,56,59,61,73,78,80,84,86,103,104,105,],[6,-11,-8,6,-15,-12,-9,-10,-13,-6,-7,-52,6,-32,-51,-17,-5,-14,-29,-22,-21,-16,-23,-27,-28,]),'OR':([30,42,43,44,45,47,48,49,50,51,56,65,69,77,88,89,90,91,92,93,94,95,96,],[-52,-36,-20,-48,-31,-26,-45,74,-38,-44,-51,74,74,-43,-18,-19,-49,-30,-24,-25,-37,-42,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,10,],[1,33,]),'bterm':([26,41,46,68,74,75,],[42,42,42,42,94,95,]),'instr_branch':([0,10,36,],[2,2,2,]),'instr_memory':([0,10,36,],[17,17,17,]),'operand':([7,26,41,46,53,63,66,67,68,71,72,74,75,76,87,],[31,45,45,45,45,84,45,45,45,45,45,45,45,45,45,]),'instr_atomic':([0,10,36,],[5,5,5,]),'cti_instr':([0,10,36,],[4,4,4,]),'instr_processing':([0,10,36,],[22,22,22,]),'program':([0,],[8,]),'statement':([0,10,],[10,10,]),'factor':([26,41,46,53,66,67,68,71,72,74,75,76,87,],[47,47,47,47,47,47,47,92,93,47,47,47,47,]),'instr_branch_a':([0,10,36,],[12,12,12,]),'texp':([26,41,46,53,66,67,68,74,75,76,87,],[43,43,43,43,88,89,43,43,43,43,43,]),'brelation':([26,41,46,53,68,74,75,],[48,48,48,48,48,48,48,]),'instr_memwr':([0,10,36,],[14,14,14,]),'bexp':([26,41,46,68,],[49,65,69,69,]),'instr_mov':([0,10,36,],[18,18,18,]),'cti_a_instr':([0,10,36,],[19,19,19,]),'instruction':([0,10,36,],[20,20,61,]),'bfactor':([26,41,46,53,68,74,75,],[51,51,51,77,51,51,51,]),'nfactor':([26,41,46,68,74,75,],[50,50,50,50,50,50,]),'exp':([26,41,46,53,68,74,75,76,87,],[52,52,70,52,70,52,52,96,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program_statements','parser.py',32),
  ('statements -> statement','statements',1,'p_statements','parser.py',37),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',38),
  ('statement -> ID :','statement',2,'p_statement','parser.py',46),
  ('statement -> ID : instruction','statement',3,'p_statement','parser.py',47),
  ('statement -> instruction','statement',1,'p_statement','parser.py',48),
  ('instruction -> instr_processing','instruction',1,'p_instruction','parser.py',58),
  ('instruction -> instr_atomic','instruction',1,'p_instruction','parser.py',59),
  ('instruction -> instr_memwr','instruction',1,'p_instruction','parser.py',60),
  ('instruction -> instr_memory','instruction',1,'p_instruction','parser.py',61),
  ('instruction -> instr_branch','instruction',1,'p_instruction','parser.py',62),
  ('instruction -> instr_branch_a','instruction',1,'p_instruction','parser.py',63),
  ('instruction -> instr_mov','instruction',1,'p_instruction','parser.py',64),
  ('instruction -> ASSERT ( bexp )','instruction',4,'p_instruction_assert','parser.py',67),
  ('instruction -> INSTR_NOP','instruction',1,'p_instruction_instr_nop','parser.py',69),
  ('instruction -> ASSUME ( bexp )','instruction',4,'p_instruction_assume','parser.py',72),
  ('instr_memwr -> MEM_SYNC # MEM_MASK','instr_memwr',3,'p_instr_memwr','parser.py',74),
  ('exp -> texp + texp','exp',3,'p_exp','parser.py',79),
  ('exp -> texp - texp','exp',3,'p_exp','parser.py',80),
  ('exp -> texp','exp',1,'p_exp','parser.py',81),
  ('instr_processing -> INSTR_ARTH REGISTER , operand','instr_processing',4,'p_instr_processing','parser.py',79),
  ('instr_mov -> INSTR_MOVE operand , REGISTER','instr_mov',4,'p_instr_mov','parser.py',84),
  ('instr_memory -> INSTR_ST [ ID ] , REGISTER','instr_memory',6,'p_instr_memory_instr_st','parser.py',89),
  ('texp -> factor * factor','texp',3,'p_texp','parser.py',92),
  ('texp -> factor / factor','texp',3,'p_texp','parser.py',93),
  ('texp -> factor','texp',1,'p_texp','parser.py',94),
  ('instr_memory -> INSTR_LD [ ID ] , REGISTER','instr_memory',6,'p_instr_memory_instr_ld','parser.py',94),
  ('instr_atomic -> INSTR_ATM [ ID ] , REGISTER','instr_atomic',6,'p_instr_atomic_instr_atm','parser.py',99),
  ('instr_branch -> cti_instr REGISTER , ID','instr_branch',4,'p_instr_branch','parser.py',103),
  ('factor -> ( exp )','factor',3,'p_factor_exp','parser.py',105),
  ('factor -> operand','factor',1,'p_factor_operand','parser.py',110),
  ('instr_branch_a -> cti_a_instr ID','instr_branch_a',2,'p_instr_branch_a','parser.py',109),
  ('cti_instr -> INSTR_BRANCH , ID , ID','cti_instr',5,'p_cti_instr','parser.py',114),
  ('cti_instr -> INSTR_BRANCH , ID','cti_instr',3,'p_cti_instr','parser.py',115),
  ('cti_instr -> INSTR_BRANCH','cti_instr',1,'p_cti_instr','parser.py',116),
  ('bexp -> bterm','bexp',1,'p_bexp','parser.py',116),
  ('bexp -> bexp OR bterm','bexp',3,'p_bexp','parser.py',117),
  ('bterm -> nfactor','bterm',1,'p_bterm_nfactor','parser.py',125),
  ('cti_a_instr -> INSTR_BRANCH_A , ID , ID','cti_a_instr',5,'p_cti_a_instr','parser.py',127),
  ('cti_a_instr -> INSTR_BRANCH_A , ID','cti_a_instr',3,'p_cti_a_instr','parser.py',128),
  ('cti_a_instr -> INSTR_BRANCH_A','cti_a_instr',1,'p_cti_a_instr','parser.py',129),
  ('bterm -> nfactor AND bterm','bterm',3,'p_bterm_nfactor_and','parser.py',128),
  ('nfactor -> NOT bfactor','nfactor',2,'p_nfactor_not','parser.py',131),
  ('nfactor -> bfactor','nfactor',1,'p_nfactor_bfactor','parser.py',134),
  ('bfactor -> brelation','bfactor',1,'p_bfactor_brelation','parser.py',139),
  ('operands -> # NUMBER','operands',2,'p_operands_operand','parser.py',139),
  ('operands -> REGISTER','operands',1,'p_operands_register','parser.py',142),
  ('bfactor -> BLIT','bfactor',1,'p_bfactor','parser.py',145),
  ('bfactor -> ( bexp )','bfactor',3,'p_bfactor','parser.py',146),
  ('operands -> operand , operands','operands',3,'p_operands_operand_operands','parser.py',146),
  ('operand -> # NUMBER','operand',2,'p_operand_number','parser.py',150),
  ('operand -> REGISTER','operand',1,'p_operand_register','parser.py',154),
  ('brelation -> exp RELOP exp','brelation',3,'p_brelation','parser.py',159),
]
