
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B389E8A5BF9DA490C045ABFAE242AC49'
    
_lr_action_items = {'*':([28,42,44,53,87,],[-50,-33,67,-49,-29,]),'-':([28,40,42,44,53,87,88,89,],[-50,63,-33,-25,-49,-29,-23,-24,]),'NUMBER':([27,],[53,]),'ASSERT':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[3,-10,-8,3,-14,-11,-9,-12,-6,-7,-50,3,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'BLIT':([24,38,43,50,64,70,71,],[41,41,41,41,41,41,41,]),'#':([7,24,38,43,50,59,62,63,64,67,68,70,71,72,83,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ASSUME':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[23,-10,-8,23,-14,-11,-9,-12,-6,-7,-50,23,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'(':([3,23,24,38,43,50,62,63,64,67,68,70,71,72,83,],[24,38,43,43,64,43,83,83,64,83,83,43,43,83,83,]),'+':([28,40,42,44,53,87,88,89,],[-50,62,-33,-25,-49,-29,-23,-24,]),'REGISTER':([4,7,19,21,24,38,43,50,54,58,59,62,63,64,67,68,70,71,72,83,94,95,96,97,],[25,28,-32,36,28,28,28,28,76,-31,28,28,28,28,28,28,28,28,28,28,99,100,-30,101,]),'INSTR_MOVE':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[7,-10,-8,7,-14,-11,-9,-12,-6,-7,-50,7,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),',':([6,19,25,28,29,36,52,53,58,77,78,81,],[26,35,51,-50,54,59,75,-49,79,94,95,97,]),'/':([28,42,44,53,87,],[-50,-33,68,-49,-29,]),'INSTR_ST':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[9,-10,-8,9,-14,-11,-9,-12,-6,-7,-50,9,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'INSTR_NOP':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[11,-10,-8,11,-14,-11,-9,-12,-6,-7,-50,11,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),':':([14,],[33,]),'$end':([1,2,5,8,10,11,12,15,16,18,20,28,31,33,34,53,57,69,74,76,80,82,99,100,101,],[-1,-10,-8,0,-2,-14,-11,-9,-12,-6,-7,-50,-3,-4,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'RELOP':([28,40,42,44,49,53,66,84,85,87,88,89,],[-50,-19,-33,-25,72,-49,72,-17,-18,-29,-23,-24,]),'INSTR_LD':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[13,-10,-8,13,-14,-11,-9,-12,-6,-7,-50,13,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'[':([9,13,22,],[30,32,37,]),']':([55,56,60,],[77,78,81,]),'ID':([0,2,5,6,10,11,12,15,16,17,18,20,26,28,30,32,33,34,35,37,51,52,53,57,69,74,75,76,79,80,82,93,99,100,101,],[14,-10,-8,-38,14,-14,-11,-9,-12,34,-6,-7,52,-50,55,56,-4,-28,58,60,74,-37,-49,-5,-13,-27,93,-20,96,-16,-15,-36,-21,-22,-26,]),'AND':([28,40,41,42,44,45,47,48,53,73,84,85,86,87,88,89,92,],[-50,-19,-47,-33,-25,-45,71,-43,-49,-41,-17,-18,-48,-29,-23,-24,-51,]),'INSTR_BRANCH':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[19,-10,-8,19,-14,-11,-9,-12,-6,-7,-50,19,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),')':([28,39,40,41,42,44,45,46,47,48,53,61,65,66,73,84,85,86,87,88,89,90,91,92,98,],[-50,-34,-19,-47,-33,-25,-45,69,-39,-43,-49,82,86,87,-41,-17,-18,-48,-29,-23,-24,-35,-40,-51,87,]),'INSTR_ARTH':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[21,-10,-8,21,-14,-11,-9,-12,-6,-7,-50,21,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'NOT':([24,38,43,64,70,71,],[50,50,50,50,50,50,]),'INSTR_ATM':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[22,-10,-8,22,-14,-11,-9,-12,-6,-7,-50,22,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'INSTR_BRANCH_A':([0,2,5,10,11,12,15,16,18,20,28,33,34,53,57,69,74,76,80,82,99,100,101,],[6,-10,-8,6,-14,-11,-9,-12,-6,-7,-50,6,-28,-49,-5,-13,-27,-20,-16,-15,-21,-22,-26,]),'OR':([28,39,40,41,42,44,45,46,47,48,53,61,65,73,84,85,86,87,88,89,90,91,92,],[-50,-34,-19,-47,-33,-25,-45,70,-39,-43,-49,70,70,-41,-17,-18,-48,-29,-23,-24,-35,-40,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([24,38,43,50,64,70,71,72,83,],[49,49,66,49,66,49,49,92,98,]),'statements':([0,10,],[1,31,]),'statement':([0,10,],[10,10,]),'bexp':([24,38,43,64,],[46,61,65,65,]),'instr_processing':([0,10,33,],[20,20,20,]),'bterm':([24,38,43,64,70,71,],[39,39,39,39,90,91,]),'cti_a_instr':([0,10,33,],[17,17,17,]),'instruction':([0,10,33,],[18,18,57,]),'bfactor':([24,38,43,50,64,70,71,],[48,48,48,73,48,48,48,]),'instr_branch':([0,10,33,],[2,2,2,]),'texp':([24,38,43,50,62,63,64,70,71,72,83,],[40,40,40,40,84,85,40,40,40,40,40,]),'instr_memory':([0,10,33,],[15,15,15,]),'instr_mov':([0,10,33,],[16,16,16,]),'program':([0,],[8,]),'instr_atomic':([0,10,33,],[5,5,5,]),'factor':([24,38,43,50,62,63,64,67,68,70,71,72,83,],[44,44,44,44,44,44,44,88,89,44,44,44,44,]),'cti_instr':([0,10,33,],[4,4,4,]),'nfactor':([24,38,43,64,70,71,],[47,47,47,47,47,47,]),'instr_branch_a':([0,10,33,],[12,12,12,]),'operand':([7,24,38,43,50,59,62,63,64,67,68,70,71,72,83,],[29,42,42,42,42,80,42,42,42,42,42,42,42,42,42,]),'brelation':([24,38,43,50,64,70,71,],[45,45,45,45,45,45,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program_statements','parser.py',32),
  ('statements -> statement','statements',1,'p_statements','parser.py',37),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',38),
  ('statement -> ID :','statement',2,'p_statement','parser.py',46),
  ('statement -> ID : instruction','statement',3,'p_statement','parser.py',47),
  ('statement -> instruction','statement',1,'p_statement','parser.py',48),
  ('instruction -> instr_processing','instruction',1,'p_instruction','parser.py',58),
  ('instruction -> instr_atomic','instruction',1,'p_instruction','parser.py',59),
  ('instruction -> instr_memory','instruction',1,'p_instruction','parser.py',60),
  ('instruction -> instr_branch','instruction',1,'p_instruction','parser.py',61),
  ('instruction -> instr_branch_a','instruction',1,'p_instruction','parser.py',62),
  ('instruction -> instr_mov','instruction',1,'p_instruction','parser.py',63),
  ('instruction -> ASSERT ( bexp )','instruction',4,'p_instruction_assert','parser.py',67),
  ('instruction -> INSTR_NOP','instruction',1,'p_instruction_instr_nop','parser.py',68),
  ('instruction -> ASSUME ( bexp )','instruction',4,'p_instruction_assume','parser.py',72),
  ('instr_processing -> INSTR_ARTH REGISTER , operand','instr_processing',4,'p_instr_processing','parser.py',73),
  ('exp -> texp + texp','exp',3,'p_exp','parser.py',79),
  ('exp -> texp - texp','exp',3,'p_exp','parser.py',80),
  ('exp -> texp','exp',1,'p_exp','parser.py',81),
  ('instr_mov -> INSTR_MOVE operand , REGISTER','instr_mov',4,'p_instr_mov','parser.py',78),
  ('instr_memory -> INSTR_ST [ ID ] , REGISTER','instr_memory',6,'p_instr_memory_instr_st','parser.py',83),
  ('instr_memory -> INSTR_LD [ ID ] , REGISTER','instr_memory',6,'p_instr_memory_instr_ld','parser.py',88),
  ('texp -> factor * factor','texp',3,'p_texp','parser.py',92),
  ('texp -> factor / factor','texp',3,'p_texp','parser.py',93),
  ('texp -> factor','texp',1,'p_texp','parser.py',94),
  ('instr_atomic -> INSTR_ATM [ ID ] , REGISTER','instr_atomic',6,'p_instr_atomic_instr_atm','parser.py',93),
  ('instr_branch -> cti_instr REGISTER , ID','instr_branch',4,'p_instr_branch','parser.py',97),
  ('instr_branch_a -> cti_a_instr ID','instr_branch_a',2,'p_instr_branch_a','parser.py',103),
  ('factor -> ( exp )','factor',3,'p_factor_exp','parser.py',105),
  ('cti_instr -> INSTR_BRANCH , ID , ID','cti_instr',5,'p_cti_instr','parser.py',108),
  ('cti_instr -> INSTR_BRANCH , ID','cti_instr',3,'p_cti_instr','parser.py',109),
  ('cti_instr -> INSTR_BRANCH','cti_instr',1,'p_cti_instr','parser.py',110),
  ('factor -> operand','factor',1,'p_factor_operand','parser.py',110),
  ('bexp -> bterm','bexp',1,'p_bexp','parser.py',116),
  ('bexp -> bexp OR bterm','bexp',3,'p_bexp','parser.py',117),
  ('cti_a_instr -> INSTR_BRANCH_A , ID , ID','cti_a_instr',5,'p_cti_a_instr','parser.py',121),
  ('cti_a_instr -> INSTR_BRANCH_A , ID','cti_a_instr',3,'p_cti_a_instr','parser.py',122),
  ('cti_a_instr -> INSTR_BRANCH_A','cti_a_instr',1,'p_cti_a_instr','parser.py',123),
  ('bterm -> nfactor','bterm',1,'p_bterm_nfactor','parser.py',125),
  ('bterm -> nfactor AND bterm','bterm',3,'p_bterm_nfactor_and','parser.py',128),
  ('nfactor -> NOT bfactor','nfactor',2,'p_nfactor_not','parser.py',131),
  ('operands -> # NUMBER','operands',2,'p_operands_operand','parser.py',133),
  ('nfactor -> bfactor','nfactor',1,'p_nfactor_bfactor','parser.py',134),
  ('operands -> REGISTER','operands',1,'p_operands_register','parser.py',136),
  ('bfactor -> brelation','bfactor',1,'p_bfactor_brelation','parser.py',139),
  ('operands -> operand , operands','operands',3,'p_operands_operand_operands','parser.py',140),
  ('bfactor -> BLIT','bfactor',1,'p_bfactor','parser.py',145),
  ('bfactor -> ( bexp )','bfactor',3,'p_bfactor','parser.py',146),
  ('operand -> # NUMBER','operand',2,'p_operand_number','parser.py',144),
  ('operand -> REGISTER','operand',1,'p_operand_register','parser.py',148),
  ('brelation -> exp RELOP exp','brelation',3,'p_brelation','parser.py',159),
]
